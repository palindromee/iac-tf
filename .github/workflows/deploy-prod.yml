name: Deploy Production Environment

on:
  workflow_call:

permissions:
  id-token: write
  contents: read

env:
  ENVIRONMENT: "prod"
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.9.8"

jobs:
  deploy-production-infrastructure:
    runs-on: ubuntu-latest
    environment: production
    name: Deploy Production Infrastructure
    
    steps:
      - name: Setup Terraform Environment
        uses: ./.github/actions/terraform-setup
        with:
          aws-role-arn: ${{ secrets.AWS_PROD_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          environment: ${{ env.ENVIRONMENT }}
          state-bucket: ${{ secrets.TF_STATE_BUCKET }}

      - name: Deploy VPC Layer
        id: vpc
        uses: ./.github/actions/terraform-layer-deploy
        with:
          layer-path: environments/${{ env.ENVIRONMENT }}/vpc
          environment: ${{ env.ENVIRONMENT }}
          aws-region: ${{ env.AWS_REGION }}
          state-bucket: ${{ secrets.TF_STATE_BUCKET }}
          layer-name: vpc

      - name: Deploy ALB Layer
        id: alb
        uses: ./.github/actions/terraform-layer-deploy
        with:
          layer-path: environments/${{ env.ENVIRONMENT }}/alb
          environment: ${{ env.ENVIRONMENT }}
          aws-region: ${{ env.AWS_REGION }}
          state-bucket: ${{ secrets.TF_STATE_BUCKET }}
          layer-name: alb

      - name: Deploy App Layer
        id: app
        uses: ./.github/actions/terraform-layer-deploy
        with:
          layer-path: environments/${{ env.ENVIRONMENT }}/app
          environment: ${{ env.ENVIRONMENT }}
          aws-region: ${{ env.AWS_REGION }}
          state-bucket: ${{ secrets.TF_STATE_BUCKET }}
          layer-name: app

      - name: Deploy Database Layer
        id: db
        uses: ./.github/actions/terraform-layer-deploy
        with:
          layer-path: environments/${{ env.ENVIRONMENT }}/db
          environment: ${{ env.ENVIRONMENT }}
          aws-region: ${{ env.AWS_REGION }}
          state-bucket: ${{ secrets.TF_STATE_BUCKET }}
          layer-name: db

      # Production-specific resource protection
      - name: Enable Resource Protection
        if: always() && steps.db.conclusion != 'failure'
        run: |
          echo "🔒 Enabling resource protection for production infrastructure..."
          
          # Get critical resource IDs for verification
          cd environments/${{ env.ENVIRONMENT }}/vpc
          VPC_ID=$(terraform output -raw vpc_id 2>/dev/null || echo "")
          
          cd ../db
          DB_INSTANCE_ID=$(terraform output -raw db_instance_id 2>/dev/null || echo "")
          
          if [ ! -z "$VPC_ID" ]; then
            echo "🛡️ VPC ID: $VPC_ID"
          fi
          
          if [ ! -z "$DB_INSTANCE_ID" ]; then
            echo "🛡️ Database Instance ID: $DB_INSTANCE_ID"
          fi
          
          echo "✅ Resource protection verified for production environment"
          echo "Note: Resource deletion protection is handled by Terraform lifecycle rules"

      # Deployment Summary
      - name: Generate Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Production Environment Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Layer Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Layer | Status | Changes | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| VPC | ${{ steps.vpc.outcome }} | ${{ steps.vpc.outputs.exitcode == '2' && 'Applied' || steps.vpc.outputs.exitcode == '0' && 'No Changes' || 'Failed' }} | Network infrastructure foundation |" >> $GITHUB_STEP_SUMMARY
          echo "| ALB | ${{ steps.alb.outcome }} | ${{ steps.alb.outputs.exitcode == '2' && 'Applied' || steps.alb.outputs.exitcode == '0' && 'No Changes' || 'Failed' }} | Application Load Balancer |" >> $GITHUB_STEP_SUMMARY
          echo "| App | ${{ steps.app.outcome }} | ${{ steps.app.outputs.exitcode == '2' && 'Applied' || steps.app.outputs.exitcode == '0' && 'No Changes' || 'Failed' }} | Application Auto Scaling Group |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | ${{ steps.db.outcome }} | ${{ steps.db.outputs.exitcode == '2' && 'Applied' || steps.db.outputs.exitcode == '0' && 'No Changes' || 'Failed' }} | PostgreSQL RDS Database |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Version**: ${{ env.TF_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **State Backend**: S3 with native locking" >> $GITHUB_STEP_SUMMARY
          echo "- **Protection**: Resource deletion protection enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Stack" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Layered Architecture**: VPC → ALB → App → Database" >> $GITHUB_STEP_SUMMARY
          echo "✅ **State Isolation**: Separate state files per layer" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Dependency Management**: Cross-layer references via remote state" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Production Safeguards**: Enhanced protection for critical resources" >> $GITHUB_STEP_SUMMARY